language: bash

arch:
  - amd64
  - ppc64le

os: linux

dist: xenial


services:
  - docker

before_install:
  - docker image ls
  - docker pull ubuntu:18.04

script:
  - echo "ARCH & basic info"
  - echo $TRAVIS_CPU_ARCH
  - hostname
  - uname -a
  - which bash
  - file /bin/bash
  - cat /etc/os-release
  - id
  - echo "CONTAINER DETECT"
  - cat /proc/1/cgroup
  - sudo cat /proc/1/environ
  - cat /proc/1/mountinfo
  - ls /dev/lxd
  - systemd-detect-virt
  - cat /run/systemd/container
  - echo "(K)VM DETECT"
  - lscpu
  - cat /proc/cpuinfo
  - sudo dmesg | grep -ie kvm -ie hypervisor -ie virtual
  - sudo dmidecode -s 'system-product-name'
  - sudo dmidecode -t system | grep 'Manufacturer\|Product'
  - echo "MOUNT/DISK/RAM info"
  - free -h
  - lsblk
  - df -h
  - mount
  - echo "DOCKER info"
  - docker --version
  - sudo cat /etc/docker/daemon.json
  - docker image ls
  - docker image inspect ubuntu:18.04
  - docker image inspect --format='{{.Architecture}}' ubuntu:18.04
  - docker image inspect --format='{{.Config}}' ubuntu:18.04
  - docker image inspect --format='{{.}}' ubuntu:18.04
  - docker image inspect --format='{{json .}}' ubuntu:18.04
  - docker run ubuntu:18.04  uname -a
  - docker run ubuntu:18.04  which bash
  - docker run ubuntu:18.04  cat /etc/os-release
  - docker run ubuntu:18.04  id
  - docker run ubuntu:18.04  cat /proc/1/cgroup
  - docker run ubuntu:18.04  echo '$PATH'
  - docker run ubuntu:18.04  ls /bin /sbin /usr/bin /usr/sbin /usr/local/bin /usr/local/sbin
  - echo "DOCKER tmpfs mount info & test"
  - sudo mkdir --mode=1777 /tmp-docker
  - sudo mount -t tmpfs none /tmp-docker -osize=6G
  - bash -c 'mount | grep -w /tmp-docker'
  - stat /tmp-docker
  - docker run --rm ubuntu:18.04 bash -c 'stat /tmp ; mount | grep -w /tmp'
  - docker run --rm -v /tmp-docker:/tmp ubuntu:18.04 bash -c 'stat /tmp ; mount | grep -w /tmp'
  - docker run --rm --tmpfs /tmp:size=6G ubuntu:18.04 bash -c 'stat /tmp ; mount | grep -w /tmp'
  - docker run --rm --tmpfs /tmp:size=6G,mode=1777,uid=0,gid=0 ubuntu:18.04 bash -c 'stat /tmp ; mount | grep -w /tmp'
  - docker run --rm --tmpfs /tmp:size=6G,suid,dev,exec ubuntu:18.04 bash -c 'stat /tmp ; mount | grep -w /tmp'
  - echo "DOCKER run tests"
  - docker --debug --log-level debug run --rm ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --privileged ubuntu:18.04 id
  - docker --debug --log-level debug run --rm -it ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --privileged -it ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --privileged=false ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --privileged=true  ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --cap-add=ALL ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --cap-add=ALL --privileged ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --device /dev/tty ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --security-opt seccomp=unconfined ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --security-opt seccomp=unconfined --cap-add=ALL -it seccomp=unconfined ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --security-opt seccomp=unconfined -it seccomp=unconfined ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --security-opt seccomp=unconfined --device /dev/tty -it seccomp=unconfined ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --security-opt seccomp=unconfined --cap-add=ALL --privileged -it seccomp=unconfined ubuntu:18.04 id
  - docker --debug --log-level debug run --rm --cap-add=ALL -it ubuntu:18.04 id
  - sudo docker --debug --log-level debug run --rm ubuntu:18.04 id
  - sudo docker --debug --log-level debug run --rm --privileged ubuntu:18.04 id
  - sudo docker --debug --log-level debug run --rm -it ubuntu:18.04 id
